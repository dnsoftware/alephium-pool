stages:
#  - test
#  - build
  - deploy

#variables:
 # GOPATH: "$CI_PROJECT_DIR/go"
  #GOBIN: "$GOPATH/bin"
  #PATH: "$GOBIN:$PATH"

# Этап тестирования
#test:
#  stage: test
#  image: golang:1.22
#  before_script:
    # Устанавливаем go-junit-report
#    - go install github.com/jstemmer/go-junit-report@latest
#  script:
#    - go test ./... -v |  go-junit-report > report.xml     # Запуск всех тестов
#  artifacts:
#    paths:
#      - report.xml
#    when: always

# Этап сборки
#build:
#  stage: build
#  image: golang:1.22    # Указываем Docker-образ с Go для сборки
#  script:
#    - go mod download   # Скачиваем зависимости
#    - cd cmd/pooler
#    - go build -o alph_pooler # Сборка проекта
#    - ls -l  # Проверяем, где находится файл
#  artifacts:
#    paths:
#      - cmd/pooler/alph_pooler           # Сохранение скомпилированного бинарного файла

# Этап деплоя (опционально)
deploy:
  stage: deploy
  before_script:
    # Установите Vault CLI, если он не установлен в контейнере
    - apt-get update && apt-get install -y wget unzip jq gettext openssh-client sshpass
    - wget https://releases.hashicorp.com/vault/1.14.3/vault_1.14.3_linux_amd64.zip
    - unzip vault_1.14.3_linux_amd64.zip
    - mv vault /usr/local/bin/
    - chmod +x /usr/local/bin/vault
    - vault --version  # Проверка установленной версии

  only:
    - master # Деплой будет выполняться только при слиянии в ветку master
  script:
    - echo "Получение токена от Vault"
    - export VAULT_TOKEN=$(curl -k -s --request POST --data "{\"role_id\":\"${VAULT_ROLE_ID}\", \"secret_id\":\"${VAULT_SECRET_ID}\"}" ${VAULT_ADDR}/v1/auth/approle/login | jq -r .auth.client_token)

    # Получение секретов из Vault
    - echo "Получение секрета из Vault"
    - |
      CA_CERT=$(curl -k -s --header "X-Vault-Token: $VAULT_TOKEN" ${VAULT_ADDR}/v1/${VAULT_PATH}/cacert | jq -r .data.value)
      ETCD_LOGIN=$(curl -k -s --header "X-Vault-Token: $VAULT_TOKEN" ${VAULT_ADDR}/v1/${VAULT_PATH}/etcd | jq -r .data.login)
      ETCD_PASSWORD=$(curl -k -s --header "X-Vault-Token: $VAULT_TOKEN" ${VAULT_ADDR}/v1/${VAULT_PATH}/etcd | jq -r .data.password)
      
      COIN_CLUSTER=$(curl -k -s --header "X-Vault-Token: $VAULT_TOKEN" ${VAULT_ADDR}/v1/${VAULT_PATH}/alph_cluster)
      COIN_SERVER_ID = echo $COIN_CLUSTER | jq -r .data.id 

    - echo "$COIN_SERVER_ID"

    # Сохраняем CA сертификат в папку сертификатов
    - echo "\"Секрет успешно получен:\""
    - mkdir -p certs
    - echo "$CA_CERT" > ca.crt



#    # Получаем список серверов для развертывания и ssh login/password для доступа к ним
#    - sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USER@$SERVER" << EOF
#      echo "Deploying application..."
#      docker pull myapp:latest
#      docker stop myapp || true && docker rm myapp || true
#      docker run -d --name myapp myapp:latest
#      EOF

    # Генерируем сертификат и приватный ключ, подписанные CA сертификатом

    # Генерируем etcdconf.yaml из шаблона и копируем в нужную папку

  environment:
    name: production
    url: https://myapp.com # URL вашего приложения после деплоя
